{
    "Validate E-Mail Address": {
        "prefix": "!valemail",
        "body": "/^[A-Z0-9!#$%&'*+/=?^_`{|}~-][A-Z0-9!#$%&'*+/=?^_`{|}~.-]*[A-Z0-9!#$%&'*+/=?^_`{|}~-]@[A-Z0-9][A-Z0-9-]*\\.[A-Z0-9-]*[A-Z0-9]$/igm",
        "description": "Validates the given email address"
    },
    "Password Strength Validator": {
        "prefix": "!valpass",
        "body": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@$!%*?&_])[A-Za-z\\d$@$!%*?&_]{${1:minlength},${2:maxlength}}$/",
        "description": "Validates the provided password to check if it contains atleast 1 Upper Case, 1 Lower Case, 1 Special Char, 1 Number. The min value represents the minimum length and max represents maximum length"
    },
    "Parse 'To' From E-mail Header": {
        "prefix": "!parehead",
        "body": "/\\b[A-Z0-9._%+-]+@(?:[A-Z0-9-]+\\.)+[A-Z]{2,6}\\b/i",
        "description": "Parse an email header and retrieve 'To' value from it"
    },
    "Validate Credit Card Number": {
        "prefix": "!valcc",
        "body": "^(?:4[0-9]{12}(?:[0-9]{3})?|[25][1-7][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$",
        "description": "Validates Credit Card Number (Does'nt check for fake numbers) Supported Cards: Visa, MasterCard, American Express, Diners Club, Discover, and JCB"
    },
    "Validate Alphanumeric Username": {
        "prefix": "!valusername",
        "body": "/^[a-z0-9]{${1:MIN_CHARS},${2:MAX_CHARS}}$/i",
        "description": "Simple Regex to validate an alphanumeric string based on the max and min length values"
    },
    "Extract URL From String": {
        "prefix": "!exturl",
        "body": "(http|ftp|https):\\/\\/([\\w_-]+(?:(?:\\.[\\w_-]+)+))([\\w.,@?^=%&:/~+#-]*[\\w@?^=%&/~+#-])?",
        "description": "Extract an URL from any string (With HTTP)"
    },
    "Validate URL": {
        "prefix": "!valurl",
        "body": "/^(?:(?:(?:https?|ftp):)?\\/\\/)(?:\\S+(?::\\S*)?@)?(?:(?!(?:10|127)(?:\\.\\d{1,3}){3})(?!(?:169\\.254|192\\.168)(?:\\.\\d{1,3}){2})(?!172\\.(?:1[6-9]|2\\d|3[0-1])(?:\\.\\d{1,3}){2})(?:[1-9]\\d?|1\\d\\d|2[01]\\d|22[0-3])(?:\\.(?:1?\\d{1,2}|2[0-4]\\d|25[0-5])){2}(?:\\.(?:[1-9]\\d?|1\\d\\d|2[0-4]\\d|25[0-4]))|(?:(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)(?:\\.(?:[a-z\\u00a1-\\uffff0-9]-*)*[a-z\\u00a1-\\uffff0-9]+)*(?:\\.(?:[a-z\\u00a1-\\uffff]{2,})))(?::\\d{2,5})?(?:[/?#]\\S*)?$/i",
        "description": "Validates if the given string is a valid URL"
    },
    "Validate A Base64 String": {
        "prefix": "!valbase64",
        "body": "^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$",
        "description": "Validate if the given string is Base64 compliant"
    },
    "Seperate Thousands": {
        "prefix": "!septhousand",
        "body": "/\\d{1,3}(?=(\\d{3})+(?!\\d))/g",
        "description": "Seperates the given numeric string with commas in thousands"
    },
    "Reduce Multiple Space To Single Space": {
        "prefix": "!valspaces",
        "body": "/\\s\\s+/g, ' '",
        "description": "Converts multiple spaces to single spaces between all words in the given string"
    },
    "Extract Text Between Quotes": {
        "prefix": "!extquotes",
        "body": "([\"'])(?:(?=(\\?))\\2.)*?\\1",
        "description": "Extracts any text between quotations (Works with nested quotes too)"
    },
    "Convert to camelCase": {
        "prefix": "!tocamel",
        "body": "${1: string}.replace(/(?:^\\w|[A-Z]|\b\\w)/g, function(word, index) {return index === 0 ? word.toLowerCase() : word.toUpperCase();}).replace(/\\s+/g, '');",
        "description": "Returns a function which converts the given string to camelCase"
    },
    "Date": {
        "prefix": "!valdate",
        "body": "^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$",
        "description": "Validates if the given string is a valid date"
    },
}